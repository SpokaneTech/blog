{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SpokaneTech Blogs!","text":""},{"location":"#blog-seriess","title":"Blog Series's","text":"<p>Building SpokaneTech.org</p>"},{"location":"building-spokane-tech/intro/","title":"About the Spokane Tech Project","text":"<p>The Spokane Tech website is a project for the community made by the community. The aim of the project is to deliver a community resource for all things tech in the Inland Northwest while providing an opportunity for contributes to gain real-world experience in a shared open source project.</p>"},{"location":"building-spokane-tech/intro/#why-are-we-doing-this","title":"Why are we doing this?","text":""},{"location":"building-spokane-tech/intro/#reason-1","title":"Reason 1:","text":"<p>There is a thriving tech community in Spokane, but many members of our community are disconnected. With multiple tech groups on different platforms, such as meetup and eventbright, there are often events of interest happening that many tech enthusiasts are not aware of. The intent is to have a single resource that includes local tech groups and the events they host.</p>"},{"location":"building-spokane-tech/intro/#reason-2","title":"Reason 2:","text":"<p>Many developers in our community, especially those earlier in their career, have skills and drive, but haven't had the opportunity to work on a project in a real professional environment. For example, a developer could have great knowledge in coding, but hasn't yet had the first professional job or participated in project with milestones, project planning, code reviews, etc. The Spokane Tech project aims to provide this and give contributes a project they can reference for career development, personal portfolios, interviews, etc. </p>"},{"location":"building-spokane-tech/intro/#initial-vision","title":"Initial Vision","text":"<p>What our project (and webapp) becomes will ultimately be dictated by members of the project and will likely evolve over time. Below are some details of the initial vision.</p>"},{"location":"building-spokane-tech/intro/#phase-one","title":"Phase One:","text":"<p>Have a web site that houses groups and events. Events may be manually or automatically added to our site. We will have views that list all the groups and events, as well as detail pages for each group and event. Ideally we'll also have a calendar view that can list all events and perhaps be filterable.</p>"},{"location":"building-spokane-tech/intro/#phase-two","title":"Phase Two:","text":"<p>Have event requests and suggestions capabilities. Here members can post a suggested events they want to give or have someone else give, and others can up/down vote the event (think reddit or stackoverflow). This can be used to prioritize events base on community interest. This can also serve as a living backlog of event ideas. Add labels to events, such as technical areas (frontend, scripting, ML, etc.) and topic levels (beginner/intermediate/etc.). With labels people can filter event based on interest and other criteria.</p>"},{"location":"building-spokane-tech/intro/#phase-three","title":"Phase Three:","text":"<p>Build member profiles. With profiles, we can have some basic metrics on things like career level, geographic location, interested and expertise. This data can help provide viability into the overall tech presence in Spokane and help drive event topics and location. This could also be a future resource to make available to local businesses and the community for things like contract work, etc. (There has been some outside interest in this type of resource)</p>"},{"location":"building-spokane-tech/intro/#future-goals","title":"Future goals:","text":"<p>The Spokane Tech project was started mostly by members of the Spokane Python User Group (SPUG), so naturally the first version of the website is based on python. In the future the project may be re-created in other languages/frameworks/etc. (such as Golang or Rust) as member interest dictates. This is intended to foster growth, knowledge-sharing, and exposure to different tech stacks and methodologies.</p>"},{"location":"building-spokane-tech/intro/#interested-in-participating-great-read-on","title":"Interested in participating? Great! Read on...","text":"<p>Here are a few things you can do to get started.</p> <ul> <li> <p>Go to the site and explore. It's live at https://www.spokanetech.org</p> </li> <li> <p>Look through the open issues and find one that interests you (issues tagged \"good first issue\" could be great candidates) on github</p> </li> <li> <p>Read our blog to learn more about the project, follow development and design decisions, and step through the process of building the site. </p> </li> <li> <p>Clone the repo to you machine and run locally, explore the code, break things, fix things, have fun. Step by step instructions are in the CONTRIBUTION doc on github.</p> </li> <li> <p>Have a feature idea or found a bug? Create an issue on github.</p> </li> </ul>"},{"location":"building-spokane-tech/intro/#need-more-help-or-direction","title":"Need more help or direction?","text":"<p>Join the Discord channel (best option) or post a question on github</p> <p>New to python, django, git, webdev? Reach out in the Discord channel and suggest a virtual meet. We'll schedule these on occasion, or as interest dictates. This can be used as q&amp;a sessions, code paring, shared code reviews, or just follow along as a member works on an issue.</p>"},{"location":"building-spokane-tech/part-01/","title":"Building Spokane Tech: Part 1","text":"<p>Welcome to the first part of the \"Building Spokane Tech\" series! In this article, we explore the tech stack, design decisions, and how to run the site locally on your system.</p>"},{"location":"building-spokane-tech/part-01/#requirements","title":"Requirements","text":"<p>For the first phase of our project we want to identify all the tech related community groups in the Spokane area, gather data about them and ingest and present events they host in one location. To make this happen we'll need a couple things.  - web interface for displaying groups and events - a database to store the groups, event, and associated information - code that can gather data from applicable event sites - a means to execute that code on a regular cadence </p>"},{"location":"building-spokane-tech/part-01/#tech-stack","title":"Tech Stack","text":"<p>Our tech stack will be comprised of the follow technologies (accompanied with a brief description of each):</p>"},{"location":"building-spokane-tech/part-01/#python","title":"Python","text":"<p>Role: Primary programming language</p> <p>Responsibility: Powers the application backend, providing a robust, readable, and flexible foundation for building web functionality and handling logic.</p>"},{"location":"building-spokane-tech/part-01/#django","title":"Django","text":"<p>Role: Web framework</p> <p>Responsibility: Facilitates rapid development of secure and maintainable websites, handling URL routing, views, models, forms, and authentication. It integrates well with databases and supports REST API development.</p>"},{"location":"building-spokane-tech/part-01/#gunicorn","title":"Gunicorn","text":"<p>Role: WSGI HTTP server</p> <p>Responsibility: Serves as the bridge between your Django application and the web server (e.g., Nginx). It efficiently handles multiple requests concurrently and scales well for production.</p>"},{"location":"building-spokane-tech/part-01/#redis","title":"Redis","text":"<p>Role: In-memory data store</p> <p>Responsibility: Used as a message broker for Celery tasks, caching, and real-time features like notifications or session management.</p>"},{"location":"building-spokane-tech/part-01/#postgres","title":"Postgres","text":"<p>Role: Database</p> <p>Responsibility: Provides a reliable, scalable, and feature-rich relational database for storing application data, such as user information, product records, and transaction logs.</p>"},{"location":"building-spokane-tech/part-01/#celery","title":"Celery","text":"<p>Role: Task queue</p> <p>Responsibility: Manages asynchronous tasks (e.g., sending emails, processing files) by offloading time-consuming operations to background workers, improving responsiveness.</p>"},{"location":"building-spokane-tech/part-01/#celery-beat","title":"Celery Beat","text":"<p>Role: Scheduler for Celery tasks Responsibility: Executes periodic tasks by scheduling them at specific intervals (e.g., daily reports or regular database cleanup).</p>"},{"location":"building-spokane-tech/part-01/#htmx","title":"HTMX","text":"<p>Role: Frontend interaction library</p> <p>Responsibility: Enhances user experience by enabling server-side rendered dynamic content updates without full page reloads. Simplifies AJAX requests, WebSockets, and DOM updates.</p>"},{"location":"building-spokane-tech/part-01/#bootstrap-5","title":"Bootstrap 5","text":"<p>Role: CSS framework</p> <p>Responsibility: Simplifies frontend design with a responsive, mobile-first grid system and pre-designed components such as buttons, modals, and navigation bars. Speeds up development and ensures a consistent, modern UI.</p>"},{"location":"building-spokane-tech/part-02/","title":"Building Spokane Tech: Part 2","text":"<p>Welcome to part 2 of the \"Building Spokane Tech\" series! In this article, we walk though the layout of the repository and detail what code lives where.</p>"},{"location":"building-spokane-tech/part-02/#repository-structure","title":"Repository Structure","text":"<p>Below is an overview of the repository structure.</p> <pre><code>.\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 django_project\n\u2502   \u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 tests\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 integration\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 regression\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 unit\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 web\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 manage.py\n\u2502   \u251c\u2500\u2500 docker\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 envs\n\u2502       \u2514\u2500\u2500 .env.template\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 pyproject.toml\n</code></pre>"},{"location":"building-spokane-tech/part-02/#file-and-directory-descriptions","title":"File and Directory Descriptions","text":""},{"location":"building-spokane-tech/part-02/#the-root-directory","title":"The Root Directory","text":"<p>Our root directory is lean and clean, with only the standard files for a git repo, including a .gitignore, a LICENSE file, a README.md file, and a pyproject.toml.  The pyproject.toml file contains our dependencies and tool configurations. This eliminates the need for additional configurations and requirements files. </p>"},{"location":"building-spokane-tech/part-02/#the-src-directory","title":"The src Directory","text":"<p>All of our actual code lives under the src directory. The are subdirectories for the django code, docker files, and our environment files.</p>"},{"location":"building-spokane-tech/part-02/#django_project","title":"django_project","text":"<p>The django_project directory has core, the django project level directory, web, the django app directory, and tests, the location of all django unittests, with further subdirectories for test categories. Having tests at this level helps keep tests organized and allows for running tests by various scopes like for the entire project, for a specific django app, or specific area like models or apis.</p>"},{"location":"building-spokane-tech/part-02/#docker","title":"docker","text":"<p>The docker directory will have applicable docker related files such as the Dockerfile, docker-compose.yaml, and .dockerignore. </p>"},{"location":"building-spokane-tech/part-02/#envs","title":"envs","text":"<p>Any applicable .env files live here. There is a .env.template, .env.local, and other .env files as needed. Note, most .env files will not be checked into source control.</p>"},{"location":"building-spokane-tech/part-03/","title":"Building Spokane Tech: Part 3","text":"<p>Welcome to part 3 of the \"Building Spokane Tech\" series! In this article, we go through steps to get the web app running locally on your machine or environment.</p>"},{"location":"building-spokane-tech/part-03/#prerequisites","title":"Prerequisites","text":"<ul> <li>git installed on system</li> <li>python installed on system (3.10+ recommended)</li> <li>access to the SpokaneTechWeb github repo: https://github.com/SpokaneTech/SpokaneTechWeb</li> </ul>"},{"location":"building-spokane-tech/part-03/#local-setup","title":"Local Setup","text":""},{"location":"building-spokane-tech/part-03/#cloning-the-repo","title":"Cloning the Repo","text":"<pre><code>git clone git@github.com:SpokaneTech/SpokaneTechWeb.git\n</code></pre>"},{"location":"building-spokane-tech/part-03/#cd-into-the-repo-directory","title":"cd into the repo directory","text":"<pre><code>cd SpokaneTechWeb\n</code></pre>"},{"location":"building-spokane-tech/part-03/#create-a-python-virtual-environment","title":"Create a python virtual environment","text":"<pre><code>python -m venv venv\n</code></pre>"},{"location":"building-spokane-tech/part-03/#activate-the-python-virtual-environment","title":"Activate the python virtual environment","text":"<p>for linux, mac, or wsl:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>for powershell:</p> <pre><code>venv\\Scripts\\activate\n</code></pre>"},{"location":"building-spokane-tech/part-03/#install-the-python-dependencies","title":"Install the python dependencies","text":"<pre><code>pip install .[dev]\n</code></pre>"},{"location":"building-spokane-tech/part-03/#install-playwright-dependencies","title":"Install playwright dependencies","text":"<p>Playwright is used for scraping web data from meetup.com</p> <pre><code>playwright install --with-deps\n</code></pre>"},{"location":"building-spokane-tech/part-03/#create-an-envlocal-file-from-the-envtemplate-file-and-update-contents-as-applicable","title":"Create an .env.local file from the .env.template file and update contents as applicable","text":"<pre><code>cp src/envs/.env.template src/envs/.env.local\n</code></pre>"},{"location":"building-spokane-tech/part-03/#cd-to-the-django_project-directory","title":"cd to the django_project directory","text":"<pre><code>cd src/django_project\n</code></pre>"},{"location":"building-spokane-tech/part-03/#create-a-local-database-by-running-django-migrations","title":"Create a local database by running django migrations","text":"<pre><code>python./manage.py migrate\n</code></pre>"},{"location":"building-spokane-tech/part-03/#create-a-local-admin-user","title":"Create a local admin user","text":"<p>This command creates a superuser superuser in your database and adds the user to the admin group. The username is 'admin' and the password is 'admin'</p> <pre><code>python ./manage.py add_superuser --group admin\n</code></pre>"},{"location":"building-spokane-tech/part-03/#populate-some-local-test-data","title":"Populate some local test data","text":"<p>This command populates your local database with SocialPlatform and TechGroup data:</p> <pre><code>python ./manage.py runscript initialize_data\n</code></pre> <p>If you'd like to ingest some actual future events data from Eventbrite and Meetup, run this command:</p> <pre><code>python ./manage.py runscript ingest_events\n</code></pre>"},{"location":"building-spokane-tech/part-03/#start-the-local-demo-server","title":"Start the local demo server","text":"<pre><code>python ./manage.py runserver\n</code></pre>"},{"location":"building-spokane-tech/part-03/#explore-the-site","title":"Explore the site","text":"<p>open a browser and navigate to http://127.0.0.1:8000</p> <p>** you can stop the local demo server anytime via <code>ctrl + c</code></p> <p>** you can login to the django admin page (at http://127.0.0.1:8000) using admin/admin</p>"},{"location":"building-spokane-tech/part-03/#enable-git-hooks-optional","title":"Enable Git Hooks (optional)","text":""},{"location":"building-spokane-tech/part-03/#git-config","title":"git config","text":"<p>To enable pre-commit code quality checks, update the location of git hooks with the following command:</p> <pre><code>git config core.hooksPath .github/hooks\n</code></pre> <p>Note: to make a commit with the precommit hooks temporarily disabled, run the following:</p> <pre><code>git commit --no-verify\n</code></pre>"},{"location":"building-spokane-tech/part-04/","title":"Building Spokane Tech: Part 4","text":"<p>Welcome to part 4 of the \"Building Spokane Tech\" series! In this article, we look at the initial modeling for the web app. </p>"},{"location":"building-spokane-tech/part-04/#initial-django-models","title":"Initial Django Models","text":"<p>The initial release of spokanetech.org will include five models in the web application: Event, Link, SocialPlatform, Tag, and TechGroup. Let's breakdown the role of each.</p> <p>Event: A tech event hosted by a TechGroup</p> <p>Link: A link associated with a TechGroup, such as the group home page</p> <p>SocialPlatform: The platform hosting the event, such as Meetup or EventBright</p> <p>Tag: An attributes of a Event or a TechGroup</p> <p>TechGroup: A local tech group that organizes events</p> <p>Each of these models use the HandyHelperBaseModel which includes created_at and updated_at datetime fields and a model manager that provides a number of useful methods.</p>"},{"location":"building-spokane-tech/part-04/#model-code","title":"Model Code","text":"<p>Below is a snapshot of the model code. See github for the latest and complete model code.</p>"},{"location":"building-spokane-tech/part-04/#event","title":"Event","text":"<pre><code>class Event(HandyHelperBaseModel):\n    \"\"\"An event on a specific day and time\"\"\"\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    start_datetime = models.DateTimeField(\n        auto_now=False, auto_now_add=False, help_text=\"date and time the event starts\"\n    )\n    end_datetime = models.DateTimeField(\n        auto_now=False, auto_now_add=False, null=True, help_text=\"date and time the event ends\"\n    )\n    location_name = models.CharField(\n        max_length=64,\n        blank=True,\n        help_text=\"name of location where this event is being hosted\",\n    )\n    location_address = models.CharField(\n        max_length=256,\n        blank=True,\n        help_text=\"address of location where this event is being hosted\",\n    )\n    map_link = models.URLField(\n        blank=True,\n        help_text=\"link to a map showing the location of the event\",\n    )\n    url = models.URLField(\n        blank=True,\n        help_text=\"URL to the event details\",\n    )\n    social_platform_id = models.CharField(\n        max_length=128,\n        blank=True,\n        help_text=\"unique identifier provided by the social platform hosting the event\",\n    )\n    group = models.ForeignKey(\"TechGroup\", blank=True, null=True, on_delete=models.SET_NULL)\n    tags = models.ManyToManyField(\"Tag\", blank=True)\n    image = models.ImageField(upload_to=\"tech_events/\", blank=True, null=True)\n</code></pre>"},{"location":"building-spokane-tech/part-04/#link","title":"Link","text":"<pre><code>class Link(HandyHelperBaseModel):\n    \"\"\"A link to a resource associated with a TechGroup or Event\"\"\"\n    name = models.CharField(max_length=64, blank=True)\n    description = models.CharField(max_length=255, blank=True)\n    url = models.URLField()\n</code></pre>"},{"location":"building-spokane-tech/part-04/#socialplatform","title":"SocialPlatform","text":"<pre><code>class SocialPlatform(HandyHelperBaseModel):\n    \"\"\"The social platform (such as Meetup) that hosts the group and events\"\"\"\n    name = models.CharField(max_length=64, unique=True, help_text=\"service where this tech group is hosted\")\n    enabled = models.BooleanField(default=True)\n    base_url = models.URLField(blank=True, help_text=\"base url of provider\")\n</code></pre>"},{"location":"building-spokane-tech/part-04/#tag","title":"Tag","text":"<pre><code>class Tag(HandyHelperBaseModel):\n    \"\"\"A Tag that describes attributes of a Event\"\"\"\n    value = models.CharField(max_length=64, unique=True, null=False)\n</code></pre>"},{"location":"building-spokane-tech/part-04/#techgroup","title":"TechGroup","text":"<pre><code>class TechGroup(HandyHelperBaseModel):\n    \"\"\"A group that organizes events\"\"\"\n    name = models.CharField(max_length=128, unique=True)\n    description = models.TextField(blank=True)\n    enabled = models.BooleanField(default=True)\n    platform = models.ForeignKey(\"SocialPlatform\", on_delete=models.CASCADE)\n    icon = models.CharField(\n        max_length=255,\n        blank=True,\n        help_text=\"Font Awesome CSS icon class(es) to represent the group.\",\n    )\n    tags = models.ManyToManyField(\"Tag\", blank=True)\n    links = models.ManyToManyField(\"Link\", blank=True)\n    image = models.ImageField(upload_to=\"techgroups/\", blank=True, null=True)\n\n</code></pre>"},{"location":"building-spokane-tech/part-05/","title":"Building Spokane Tech: Part 5","text":"<p>Welcome to part 5 of the \"Building Spokane Tech\" series! In this article, we'll explore the django views and templates used to server web pages in the initial web app. </p>"},{"location":"building-spokane-tech/part-05/#pages","title":"Pages","text":"<p>The initial release of spokanetech.org includes a small set of pages, including the landing page, an about page, a calendar page, and event and group pages. Here is a brief description of each page:</p> <p>Index: Home page of spokanetech.org</p> <p>About: Informational page for spokanetech.org</p> <p>Calendar: Monthly Calendar listing all events per month</p> <p>Group List: Page listing all tech groups</p> <p>Event List: Page listing all upcoming events</p> <p>Group Detail: Page detailing a specific tech group</p> <p>Event Detail: Page detailing a specific event</p>"},{"location":"building-spokane-tech/part-05/#views","title":"Views","text":"<p>The views are designed to support both htmx and non-htmx requests. A different template will be used accordingly when the \"template_name\" and \"htmx_template_name\" parameters are provided. Selection of the template is handled by the base class.</p> <p>For our main entities we have a detail, list, and modal views to present data as applicable on web pages. Below is a snapshot of the tech group views. See github for the latest and complete code.</p> <pre><code>\nclass TechGroupView(HtmxOptionDetailView):\n    \"\"\"Render detail page for a TechGroup instance\"\"\"\n    model = TechGroup\n    htmx_template_name = \"web/partials/detail/group.htm\"\n    template_name = \"web/full/detail/group.html\"\n\n\nclass TechGroupsView(HtmxOptionMultiFilterView):\n    \"\"\"Render a list of TechGroup instances\"\"\"\n    htmx_list_template_name = \"web/partials/list/groups.htm\"\n    htmx_list_wrapper_template_name = \"web/partials/list/wrapper_list.htm\"\n    htmx_template_name = \"web/partials/marquee/groups.htm\"\n    queryset = TechGroup.objects.filter(enabled=True)\n    template_name = \"web/full/list/groups.html\"\n\n\nclass TechGroupModalView(ModelDetailBootstrapModalView):\n    \"\"\"Render Bootstrap 5 modal displaying get details of a TechGroup instance\"\"\"\n    modal_button_submit = None\n    modal_size = \"modal-lg\"\n    modal_template = \"web/partials/modal/group_information.htm\"\n    modal_title = \"Group Info\"\n    model = TechGroup\n</code></pre>"},{"location":"building-spokane-tech/part-05/#templates","title":"Templates","text":"<p>Templates are split into to sections, full and partials. Templates in the full subdirectory hold the template that extend the django base template and are used when the request to the page is not htmx. Templates in the partials subdirectory are used by htmx requests. We use a filename convention where full pages have the .html extension and partials have the .htm extension.</p> <p>Here is the directory structure of the templates directories:</p> <pre><code>.\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 django_project\n\u2502   \u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 templates\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 base.htm\n\u2502   \u2502   \u251c\u2500\u2500 web\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 templates\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 web\n\u2502   \u2502   \u2502           \u251c\u2500\u2500  full\n\u2502   \u2502   \u2502           \u2502    \u251c\u2500\u2500  custom\n\u2502   \u2502   \u2502           \u2502    \u2502    \u251c\u2500\u2500  about.html\n\u2502   \u2502   \u2502           \u2502    \u2502    \u251c\u2500\u2500  calendar.html\n\u2502   \u2502   \u2502           \u2502    \u2502    \u2514\u2500\u2500  index.html\n\u2502   \u2502   \u2502           \u2502    \u251c\u2500\u2500  detail\n\u2502   \u2502   \u2502           \u2502    \u2502    \u251c\u2500\u2500  event.html\n\u2502   \u2502   \u2502           \u2502    \u2502    \u2514\u2500\u2500  group.html\n\u2502   \u2502   \u2502           \u2502    \u2514\u2500\u2500  list\n\u2502   \u2502   \u2502           \u2502         \u251c\u2500\u2500  events.html\n\u2502   \u2502   \u2502           \u2502         \u2514\u2500\u2500  groups.html\n\u2502   \u2502   \u2502           \u2502\n\u2502   \u2502   \u2502           \u2514\u2500\u2500  partials\n\u2502   \u2502   \u2502                \u251c\u2500\u2500  custom\n\u2502   \u2502   \u2502                \u2502    \u251c\u2500\u2500  about.htm\n\u2502   \u2502   \u2502                \u2502    \u251c\u2500\u2500  calendar.htm\n\u2502   \u2502   \u2502                \u2502    \u2514\u2500\u2500  index.htm\n\u2502   \u2502   \u2502                \u251c\u2500\u2500  detail\n\u2502   \u2502   \u2502                \u2502    \u251c\u2500\u2500  event.htm\n\u2502   \u2502   \u2502                \u2502    \u2514\u2500\u2500  group.htm\n\u2502   \u2502   \u2502                \u251c\u2500\u2500  list\n\u2502   \u2502   \u2502                \u2502    \u251c\u2500\u2500  events.htm\n\u2502   \u2502   \u2502                \u2502    \u2514\u2500\u2500  groups.htm\n\u2502   \u2502   \u2502                \u251c\u2500\u2500  marquee\n\u2502   \u2502   \u2502                \u2502    \u251c\u2500\u2500  events.htm\n\u2502   \u2502   \u2502                \u2502    \u2514\u2500\u2500  groups.htm\n\u2502   \u2502   \u2502                \u2514\u2500\u2500  modal\n\u2502   \u2502   \u2502                     \u251c\u2500\u2500  event.htm\n\u2502   \u2502   \u2502                     \u2514\u2500\u2500  group.htm\n\u2502   \u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"building-spokane-tech/part-06/","title":"Building Spokane Tech: Part 6","text":"<p>Welcome to part 6 of the \"Building Spokane Tech\" series! In this article, we'll look at how to scrape group and event data from meetup.com and eventbrite.com and populate our database accordingly. </p>"},{"location":"building-spokane-tech/part-06/#source-data","title":"Source Data","text":"<p>There are a couple platforms that tech groups are currently utilizing, with the majority being on meetup.com and eventbrite.com. We'll focus on collecting group and event data from those two platforms and address data sourcing from additional platforms as future needs dictate. </p> <p>Getting data from these platforms from their sites into ours involves a couple steps, including capturing the data, parsing the data, and storing it in our database for use on the website.</p>"},{"location":"building-spokane-tech/part-06/#data-collection","title":"Data Collection","text":"<p>Data collection for eventbrite and meetup will vary as eventbrite includes an API we can utilize for free, but meetup only has API access available for a fee. Do to this, we'll be web scraping. </p> <p>The first step is to actually capture HTML from a page. In some cases this can be as simple as using the requests library like so:</p> <p><code>html_content = requests.get(\"www.some_url.com\")</code></p> <p>This works okay for some pages, but not of others, where a timeout occurs or the expected html content is not found. This could be due to rate limiting, bot detection, or other server side measures. To make web capture more reliable, we're utilizing Playwright, an automation library for controlling websites. Playwright creates a browser instance for a more real-life interaction with data on a website. It also provides some more advance tools like network waits, and detection of html elements. This provides a more reliable means of collecting data, but is slower and requires a number of heavier dependencies. </p>"},{"location":"building-spokane-tech/part-06/#data-parsing","title":"Data Parsing","text":"<p>Once we've captured html content from a web page we'll need to parse out specific pieces of data. To accomplish this we're using BeautifulSoup, a Python library for pulling data out of HTML files.</p> <p>For events on meetup we perform two capture and parse steps, one to get the list of events from the group page where links to future events are listed, and another to open and capture data from the detail page of each individual event. </p>"},{"location":"building-spokane-tech/part-06/#codeutilities","title":"Code/Utilities","text":"<p>Under the web app we have a utilities subdirectory with scrapper files for eventbrite and meetup. Utilities for additional platforms may be added in the future. There's also a html_utils file that contains code to capture html content with requests and playwright. The directory structure looks like this:</p> <pre><code>.\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 django_project\n\u2502   \u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 tests\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 web\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utilities\n\u2502   \u2502   \u2502   \u2502     \u2514\u2500\u2500 scrapers\n\u2502   \u2502   \u2502   \u2502         \u251c\u2500\u2500 eventbrite.py\n\u2502   \u2502   \u2502   \u2502         \u2514\u2500\u2500 meetup.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 html_utils.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"building-spokane-tech/part-07/","title":"Building Spokane Tech: Part 7","text":"<p>Welcome to part 7 of the \"Building Spokane Tech\" series! In this article, we'll explore integrating Celery for scheduling tasks, executing work asynchronously, and monitoring task statuses.</p>"},{"location":"building-spokane-tech/part-07/#django-tasks-and-celery","title":"Django Tasks and Celery","text":"<p>In a Django project, tasks.py is typically used to define background tasks that are executed asynchronously. This is common in applications where long-running or scheduled operations (such as sending emails, processing files, or performing API calls) should not block the main request-response cycle.</p> <p>Celery is a distributed task queue that integrates well with Django to handle background jobs asynchronously. It allows you to schedule and execute tasks efficiently.</p>"},{"location":"building-spokane-tech/part-07/#creating-tasks","title":"Creating Tasks","text":"<p>In our service we'll use tasks defined in the tasks.py file to perform data ingestion from eventbrite and meetup. We have a few different tasks defined, namely a 'parent' launcher task, and a separate 'child' task for performing the bulk of the work. </p> <p>Parent Tasks</p> <p>The parent task approach allows us to enable some basic control over what work gets queued for execution. For example, to run event ingestion for eventbrite groups we can first get a list of groups from our database, then launch individual jobs for each. Each job can succeed or fail independently of other jobs, and we'll have separate outputs and results. </p> <p>Here's an example of a parent task:</p> <pre><code>@shared_task(time_limit=900, max_retries=0, name=\"web.launch_eventbrite_event_ingestion\")\ndef launch_eventbrite_event_ingestion():\n    \"\"\"parent task for ingesting future events for tech groups on Eventbrite\"\"\"\n    tech_group_list = TechGroup.objects.filter(enabled=True, platform__name=\"Eventbrite\")\n    for group in tech_group_list:\n        job = ingest_future_eventbrite_events.s(group.pk)\n        job.apply_async()\n</code></pre> <p>In the code above, the <code>tech_group_list</code> is a queryset of groups that are enabled and on the eventbrite platform. The <code>ingest_future_eventbrite_events</code> is the task to be executed, and <code>job.apply_async()</code> is the code to put the job on the queue for a background worker to consume.</p>"},{"location":"building-spokane-tech/part-07/#scheduling-tasks","title":"Scheduling Tasks","text":"<p>Django Celery Beat</p> <p>Django Celery Beat is an extension for Celery that enables scheduling periodic  tasks in a cron-like manner using the Django Admin panel. It allows you to manage scheduled tasks dynamically without modifying code.</p> <p>In our service we use this to automatically run the parent tasks at regularly scheduled intervals, for example, every eight hours.</p>"},{"location":"building-spokane-tech/part-07/#monitoring-tasks","title":"Monitoring Tasks","text":"<p>Celery Flower</p> <p>Celery Flower is a real-time web-based monitoring tool for Celery. It provides insights into task execution, workers, queues, and performance. Key features include:</p> <p>Dashboard Overview - Displays task statistics (Succeeded, Failed, Pending, etc.) - Shows real-time execution of Celery tasks</p> <p>Workers Monitoring - Lists all active workers - Shows worker status, uptime, and queue load</p> <p>Task Monitoring - Provides details of each task (Arguments, Status, Runtime, etc.) - Allows you to retry failed tasks</p> <p>Queues &amp; Broker Inspection - Displays Celery queues and their task load - Shows messages in Redis or RabbitMQ queues</p>"},{"location":"building-spokane-tech/part-08/","title":"Building Spokane Tech: Part 8","text":"<p>Welcome to part 8 of the \"Building Spokane Tech\" series! In this article, we'll discuss adding Docker and Docker Compose for running components of our service in containers.</p> <p>Containerization has become an essential tool for modern web development, and Docker is at the forefront of this revolution. When developing a Django-based web application like ours, using Docker ensures consistency across development and deployed environments. By leveraging Docker Compose, we can efficiently manage multiple services required by our application.</p>"},{"location":"building-spokane-tech/part-08/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool that allows you to define and manage multi-container Docker applications using a simple YAML file (docker-compose.yaml). It enables developers to run interconnected services, such as a web application, database, and message broker, with a single command. The  Docker Compose basic concepts include:</p> <p>Key Docker Compose Configuration Options</p> <ul> <li> <p>version: Defines the Compose file format version. In our case, we use \"3.9\", which is one of the latest stable versions.</p> </li> <li> <p>services: Lists all the containers that make up the application. Each service runs in its own container.</p> </li> </ul> <p>Service Configuration Keys</p> <ul> <li> <p>image: Specifies the Docker image to use for the container. If the image is not found locally, Docker will pull it from a registry like Docker Hub.</p> </li> <li> <p>build: Defines how to build the image from a Dockerfile. It usually includes:</p> <ul> <li>context: The directory containing the Dockerfile.</li> <li>dockerfile: The path to the specific Dockerfile used to build the image.</li> </ul> </li> <li> <p>container_name: Gives a custom name to the container instead of a randomly generated one.</p> </li> <li> <p>command: Overrides the default command specified in the Dockerfile, allowing you to run specific commands when the container starts.</p> </li> <li> <p>env_file: Loads environment variables from an external .env file.</p> </li> <li> <p>ports: Maps ports between the container and the host.</p> </li> <li> <p>depends_on: Specifies service dependencies. A container will not start until its dependencies are up and running.</p> </li> </ul> <p>Volumes</p> <p>Volumes store persistent data outside the container filesystem, ensuring data is not lost when containers are restarted or removed.</p>"},{"location":"building-spokane-tech/part-08/#our-services","title":"Our Services","text":"<p>Let's review the components in our system, each of these will be a service in our docker-compose.yaml file.</p> <ul> <li>Django (Web Application) \u2013 The core application running on Gunicorn or the Django development server</li> <li>PostgreSQL (Database) \u2013 Stores application data</li> <li>Redis (Message Broker) \u2013 Used by Celery for task queuing</li> <li>Celery Worker \u2013 Executes asynchronous tasks</li> <li>Celery Beat \u2013 Handles scheduled tasks</li> <li>Celery Flower \u2013 Provides a web UI for monitoring Celery tasks</li> </ul>"},{"location":"building-spokane-tech/part-08/#our-docker-composeyaml-file","title":"Our docker-compose.yaml file","text":"<pre><code>version: '3.9'\n\nservices:\n  django:\n    image: spokanetech-django:latest\n    container_name: django\n    env_file:\n      - .env.compose\n    build:\n      context: ../..\n      dockerfile: src/docker/Dockerfile\n    command: ./entrypoint.sh\n    ports:\n      - \"8080:8000\"\n    depends_on:\n      - db\n      - redis\n\n  db:\n    image: postgres:17\n    container_name: postgres_db\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n    env_file:\n      - .env.compose\n\n  redis:\n    image: redis:7.2-alpine\n    container_name: redis\n    restart: unless-stopped\n    ports:\n      - \"6379:6379\"\n\n  worker:\n    image: spokanetech-django:latest\n    container_name: worker\n    env_file:\n      - .env.compose\n    build:\n      context: ../..\n      dockerfile: src/docker/Dockerfile\n    command: celery -A core worker -l info\n    depends_on:\n      - redis\n      - db\n\n  beat:\n    image: spokanetech-django:latest\n    container_name: beat\n    env_file:\n      - .env.compose\n    build:\n      context: ../..\n      dockerfile: src/docker/Dockerfile\n    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler\n    depends_on:\n      - redis\n      - db\n\n  flower:\n    image: spokanetech-django:latest\n    container_name: flower\n    env_file:\n      - .env.compose\n    command: [\"celery\", \"-A\", \"core\", \"--config=flowerconfig.py\", \"flower\"]\n    ports:\n      - \"5555:5555\"\n    depends_on:\n      - redis\n      - db\n\nvolumes:\n  postgres_data:\n  static_volume:\n</code></pre>"},{"location":"building-spokane-tech/part-08/#running-the-application","title":"Running the Application","text":"<p>Docker Compose provides several commands to manage services. Here are the basics:</p> <p>Building containers</p> <p>To build the containers run: <code>docker-compose build</code></p> <p>This builds images for the services defined in docker-compose.yaml using the specified Dockerfile. If an image already exists, it will only rebuild if changes are detected.</p> <p>Starting containers</p> <p>To start the containers run: <code>docker-compose up</code></p> <p>This starts all services defined in docker-compose.yaml. It also automatically builds missing images if they are not found.</p> <p>To run the containers in detached mode use: <code>docker-compose up -d</code></p> <p>This runs containers in the background and allows applications to run persistently.</p> <p>Stopping containers</p> <p>To stop the containers use: <code>docker-compose down</code></p> <p>This stops and removes all containers, networks, and volumes (if specified); it does not remove built images.</p> <p>Rebuild and restart containers</p> <p>To build the container when running, use: <code>docker-compose up --build</code></p> <p>This rebuilds images before starting containers and ensures the latest changes in the Dockerfile are applied.</p>"},{"location":"building-spokane-tech/part-08/#accessing-services","title":"Accessing Services","text":"<p>All of our components are available on localhost on various their applicable ports: </p> <ul> <li>Django App: http://localhost:8080</li> <li>Celery Flower UI: http://localhost:5555</li> <li>PostgreSQL: Connect via localhost:5432</li> <li>Redis: Available on localhost:6379</li> </ul>"},{"location":"building-spokane-tech/part-09/","title":"Part 9: Hosting","text":"<p>coming soon</p>"},{"location":"building-spokane-tech/part-10/","title":"Part 10: CI/CD","text":"<p>coming soon</p>"},{"location":"building-spokane-tech/related-materials/","title":"Building Spokane Tech: Related Materials","text":""},{"location":"building-spokane-tech/related-materials/#technical-references","title":"Technical References","text":"<ul> <li>Celery https://docs.celeryq.dev</li> <li>Django https://www.djangoproject.com/</li> <li>Docker https://www.docker.com/</li> <li>FontAwesome https://fontawesome.com/</li> <li>HTMX https://htmx.org/</li> <li>Postgres https://www.postgresql.org/</li> <li>PlayWright https://playwright.dev/python/</li> <li>Python https://www.python.org/</li> <li>Redis https://redis.io/</li> </ul>"}]}